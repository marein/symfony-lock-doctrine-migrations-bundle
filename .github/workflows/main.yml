name: CI

on:
  push:
    branches: master
  pull_request:

jobs:
  pipeline:
    strategy:
      matrix:
        operating-system: [ubuntu-latest]
        php-version: ['8.0', '8.1', '8.2', '8.3']
        symfony-version: ['^5.2', '^6.0', '^7.0']
        doctrine-dbal-version: ['^2.12', '^3.0']
        doctrine-bundle-version: ['^2.2']
        doctrine-migrations-bundle-version: ['^3.0']
        exclude:
          - php-version: '8.0'
            symfony-version: '^7.0'
          - php-version: '8.1'
            symfony-version: '^7.0'
          - symfony-version: '^7.0'
            doctrine-dbal-version: '^2.12'
    name: >-
      ${{ matrix.php-version }} with
      sf ${{ matrix.symfony-version }},
      dbal ${{ matrix.doctrine-dbal-version }},
      d-bun ${{ matrix.doctrine-bundle-version }},
      d-mig-bun ${{ matrix.doctrine-migrations-bundle-version }}
    runs-on: ${{ matrix.operating-system }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: pdo_mysql, pdo_pgsql

      - name: Prepare
        run: |
          composer install
          composer require \
            symfony/config:${{ matrix.symfony-version }} \
            symfony/console:${{ matrix.symfony-version }} \
            symfony/dependency-injection:${{ matrix.symfony-version }} \
            symfony/http-foundation:${{ matrix.symfony-version }} \
            symfony/http-kernel:${{ matrix.symfony-version }} \
            symfony/framework-bundle:${{ matrix.symfony-version }} \
            doctrine/dbal:${{ matrix.doctrine-dbal-version }} \
            doctrine/doctrine-bundle:${{ matrix.doctrine-bundle-version }} \
            doctrine/doctrine-migrations-bundle:${{ matrix.doctrine-migrations-bundle-version }} \
            --update-with-dependencies \
            --no-interaction

      - name: Testsuite
        run: |
          vendor/bin/phpcs
          vendor/bin/phpstan analyse
          docker run \
            --name mysql-8.0 \
            --env MYSQL_ROOT_PASSWORD=password \
            --publish 3306:3306 \
            --detach \
            mysql:8.0
          docker run \
            --name postgres-13.2 \
            --env POSTGRES_PASSWORD=password \
            --publish 5432:5432 \
            --detach \
            postgres:13.2
          vendor/bin/phpunit
          docker rm -f mysql-8.0
          docker rm -f postgres-13.2
